import cv2
from picamera.array import PiRGBArray
from picamera import PiCamera
import numpy as np

class CircleDetector(object):
    def detectCircles(self, image, threshold, minRadius, maxRadius):
        circles = list()
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        blur_image = cv2.GaussianBlur(gray_image, (5, 5), 0)
        ret, thresh = cv2.threshold(gray_image, threshold, 255, cv2.THRESH_BINARY)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5), (-1, -1))
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel, (-1, -1))
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, (-1, -1))

        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for cnt in contours:
            if len(cnt) < 5:
                continue

            area = cv2.contourArea(cnt)
            if area < (minRadius**2) * np.pi or area > (maxRadius**2) * np.pi:
                continue

            arc_length = cv2.arcLength(cnt, True)
            radius = arc_length / (2 * np.pi)

            if not (minRadius < radius and radius < maxRadius):
                continue

            ellipse = cv2.fitEllipse(cnt)
            ratio = float(ellipse[1][0]) / float(ellipse[1][1])

            if ratio > 0.9 and ratio < 1.1:
                corner = cv2.approxPolyDP(cnt, 0.02 * arc_length, True)
                cornerNum = len(corner)
                if cornerNum > 4:
                    circles.append(ellipse)

        return circles

camera = PiCamera()
camera.resolution = (1280, 720)
camera.framerate = 30
rawCapture = PiRGBArray(camera, size=(1280, 720))

circle_detector = CircleDetector()

for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    image = frame.array
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # 调用圆形检测函数
    circles = circle_detector.detectCircles(image, threshold=100, minRadius=10, maxRadius=100)

    # 在图像上绘制检测到的圆形
    if circles:
        for circle in circles:
            (x, y), radius = circle
            center = (int(x), int(y))
            radius = int(radius)
            cv2.circle(image, center, radius, (0, 255, 0), 2)

    cv2.imshow("frame", image)
    key = cv2.waitKey(1)
    rawCapture.truncate(0)
    if key == 27:
        break

cv2.destroyAllWindows()
